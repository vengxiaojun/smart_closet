/*
 *  Copyright (c) 2025 ByteDance Inc. All rights reserved.

   API implementation arount OpenAI API
*/
#ifndef ONESDK_INFER_HTTP_H
#define ONESDK_INFER_HTTP_H

#ifdef ONESDK_ENABLE_AI

#define ONESDK_INFER_DEFAULT_CHAT_TIMEOUT 60 * 1000 // 60 seconds

#include <stdint.h>
#include <stdbool.h>
#include <cJSON.h>
#include "protocols/http.h"
#include "iot_basic.h"
// 新增工具定义结构体
typedef struct chat_tool {
    char *type;  // 固定为"function"
    struct {
        char *name;
        char *description;
        char *parameters; // 直接存储JSON字符串，可以参考 https://platform.openai.com/docs/api-reference/chat/create
        char* required; //格式 "required": ["location"]
    } function;
} chat_tool_t;

typedef struct char_image_url {
    char *url;  // 图片url or base64编码: "data:image/jpeg;base64,{b64}"
    char *detail; // 图片细节 "auto" or "high" or "low"
} char_image_url_t;

typedef struct chat_multi_content {
    char *type; // "text" or "image_url"
    char *text; // 文本内容
    char_image_url_t image_url; // 图片地址 or base64编码
} chat_multi_content_t;

// The tool calls generated by the model, such as function calls.
typedef struct chat_tool_call {
    char *id;
    char *type;
    struct {
        char *name;
        char *arguments;
    } function;
} chat_tool_call_t;
// 消息结构体
typedef struct chat_message{
    const char *role;
    const char *content;
    chat_multi_content_t *multi_contents;
    int multi_contents_count;
    // 返回结构体用 only
    chat_tool_call_t *tool_calls;  // 大模型返回的多个模型调用参数
    int tool_calls_count;          // 数组长度
    char *tool_call_id;            // 用于发送给大模型函数返回
    char *function_call;           // 保持向后兼容
    // 返回结构体用
} chat_message_t;

// OpenAI 请求结构体
typedef struct chat_request{
    const char *model;
    chat_message_t *messages;
    int messages_count;
    chat_tool_t *tools;        // 新增工具数组
    int tools_count;           // 工具数量
    const char *tool_choice;   // 新增工具选择策略
    int max_completion_tokens;
    bool stream;
    float temperature; /*0-2, 默认1.0*/
    float top_p; /**/
    bool store;

} chat_request_t;

// 消息选择项结构体
typedef struct chat_choice{
    int index;
    chat_message_t message;
    void *logprobs; // 假设为 null，暂不处理
    const char *finish_reason;
} chat_choice_t;

// 用量结构体
typedef struct {
    int prompt_tokens;
    int completion_tokens;
    int total_tokens;
    struct {
        int reasoning_tokens;
        int accepted_prediction_tokens;
        int rejected_prediction_tokens;
    } completion_tokens_details;
} chat_usage;

// OpenAI 响应结构体
typedef struct chat_response {
    char *id;
    char *object;
    uint64_t created;
    chat_choice_t *choices;
    int choices_count;
    char *model;
    char *system_fingerprint;
    chat_usage usage;
    char *request_id; // 新增字段
    char *tool_choice; // 新增字段
    uint64_t seed; // 新增字段
    double top_p; // 新增字段
    double temperature; // 新增字段
    double presence_penalty; // 新增字段
    double frequency_penalty; // 新增字段
    const char *input_user; // 新增字段
    const char *service_tier; // 新增字段
    // chat_tool_call_t *tool_calls; // 新增字段
    // int tool_calls_count; // 新增字段
    void *metadata; // 新增字段
    void *response_format; // 新增字段
} chat_response_t;

// stream 响应结构体
// 假设 chat.h 中定义了如下结构体
typedef struct content_filter_result{
    int filtered;
} content_filter_result_t;

typedef struct content_filter_results{
    content_filter_result_t hate;
    content_filter_result_t self_harm;
    content_filter_result_t sexual;
    content_filter_result_t violence;
} content_filter_results_t;

typedef struct chat_stream_delta_t{
    char *role;
    char *content;
    chat_tool_call_t *tool_calls; // 改为结构体数组
    int tool_calls_count;          // 数组长度
} chat_stream_delta_t;

typedef struct chat_stream_choice{
    int index;
    chat_stream_delta_t delta;
    char *finish_reason;
    content_filter_results_t content_filter_results;
} chat_stream_choice_t;

typedef struct chat_stream_response{
    char *id;
    char *object;
    long created;
    char *model;
    chat_stream_choice_t *choices;
    int choices_count;
    char *system_fingerprint;
} chat_stream_response_t;

// 发送流式请求回调函数类型
typedef void (*chat_stream_callback)(const chat_stream_response_t *partial_response, void *user_data);

typedef void (*chat_completed_callback)(void *user_data);

typedef void (*chat_error_callback)(int code, const char *msg, void *user_data);

typedef struct chat_request_context {
    chat_request_t *request;
    char *endpoint;
    char *api_key;
    char *completion_id;
    http_request_context_t *http_ctx;
    chat_stream_callback on_chat_stream_cb;
    chat_completed_callback on_chat_completed_cb;
    chat_error_callback on_chat_error_cb;
    void *user_data;
}chat_request_context_t;

// 创建请求上下文
chat_request_context_t *chat_request_context_init(const char* endpoint, const char *api_key, const chat_request_t *request, iot_basic_ctx_t *iot_basic_ctx);


// 发送非流式请求
chat_response_t *chat_send_non_stream_request(chat_request_context_t *ctx);



// 发送流式请求
int chat_send_stream_request(chat_request_context_t *ctx, chat_stream_callback stream_callback, chat_completed_callback callback, chat_error_callback error_callback, void *user_data);

// 等待异步请求完成
int chat_wait_complete(chat_request_context_t *ctx);

// 释放响应结构体内存
void chat_free_response(chat_response_t *response);

// 释放 openai_stream_delta 结构体
void chat_free_stream_delta(chat_stream_delta_t *delta);

// 释放 openai_stream_choice 结构体
void chat_free_stream_choice(chat_stream_choice_t *choice);

// 释放 openai_stream_response 结构体
void chat_free_stream_response(chat_stream_response_t *response);

// 释放请求上下文
void chat_release_request_context(chat_request_context_t *ctx);

// 新增接口：获取聊天完成结果
chat_response_t *chat_get_chat_completion(const char *api_key, const char *completion_id);
#endif // ONESDK_ENABLE_AI

#endif // ONESDK_INFER_HTTP_H